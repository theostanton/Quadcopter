    #include <Servo.h>    #include <Wire.h>            /* CHECK PINS        Pins     Motor A : 3 : front left    Motor B : 10 : front right    Motor C : 9  : rear right    Motor D : 5  : rear left    RX Roll : 11 : CH1    RX Thrt : 4  : Ch2    RX Ptch : 12 : CH3      RX Yaw  : 6  : CH4    RX Aux1 : 7  : CH5    RX Aux2 : 8  : CH6    SCL     : A5    SDA     : A4    Interrupt : 2           */    //Global   -----------------------------------------        // Pre-flight    boolean checkStartup = false;    boolean serial = false;    boolean processing = true;    #define ACTIVE_CHANNELS 6 // number of RX channels to read, only 4 needed for now    boolean AUXACTIVE = true;    int MANUALspd = 0 ; // debugging, temporary    boolean getRX = true;     volatile boolean bInt = false;    volatile boolean bIntToggle = false;        // Variables        boolean LEDtoggle = false;    boolean READY = false;    //int readycount = 0;    volatile boolean bSOS = true;        #define X 0    #define Y 1    #define Z 2    #define ROLL 0    #define PITCH 1    #define YAW 2     #define THROTTLE 3    // Control Config   -----------------------------------------        //#define KP 0.08    #define KI 0.0    //#define KD -0.00      float KP = 0.08;    //float KI = 0.0;    float KD = -0.05;        struct control    {      float angle[2];      float error[3];      float f_error[3];      float error_integral[3];    }    ctrl = { { 0.0, 0.0 }, { 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0 } };// Nodes  -----------------------------------------        #define nSENSORS 0    #define nCONTROL 1    #define nMOTORS 2    #define nPRINT 3    #define nRX 4        float DTmax = 0.0;    int DTcount = 0;    int DTlist[44];    int DTlistcount = 0;    int DTlistcountread = 0;    double DTs;    double DTavg = 0;    double nodeStart = 0.0;    double nodeEnd = 0.0;    double node[10] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, };    double nodeTot[10];     int usedNodes = 5; // number of node values to be sent    // Processing  -----------------------------------------    struct processing  {    float p[4];    float i[4];    float d[4];  }  proc = { { 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0 } };  // Sensor Config  -----------------------------------------        #include <LSM303.h>    LSM303 compass;     int L3G4200D_Address = 107; // different to suggested        float ZEROLOOPS = 150.0;    float RXZEROLOOPS = 5.0;    int heading = 0;    #define RATIO 0.9 // ACC TO GYRO ratio    // Gyro  -----------------------------------------      #define GYROGAIN 14.735      struct gyro     {       float raw[3];      float zero[3];      float rate[3];      float angle[3];    }     gyro = { { 0, 0, 0 }, { 0, 0, 0 }, { 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0 } };        // Magnetometer  -----------------------------------------      int Heading = 0;    int initHeading = 0;    boolean firstHeading = true;     // Accelerometer  -----------------------------------------          #define ACCGAIN 1100.0 // Accelerometer gain, square of gain calced in setup    #define ACCGAINSQ 1210000.0            struct accelerometer     {       float zero[3];      float rate[3];      float angle[3];      float prev[3];    }     acc = { { 0, 0, 0 }, { 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0 } };    // Motor Config  -----------------------------------------        #define A 0 // FRONT LEFT    #define B 1 // FRONT RIGHT - circuit    #define C 2 // REAR RIGHT - circuit    #define D 3 // REAR LEFT - circuit    #define MOTOR_MIN 10 // minimum throttle servo command angle    #define MOTOR_MAX 179 // max throttle servo angle command    #define MOTOR_A_PIN 3    #define MOTOR_B_PIN 10    #define MOTOR_C_PIN 9    #define MOTOR_D_PIN 5        struct Motor {       float f_correction[4];  // float to calculate command      int command[4];         // final motor command      int PIN[4];             // motor O/P pin      boolean armed;          // motors armed    }    motor =    {      { 0.0 , 0.0 , 0.0 , 0.0 },      { MOTOR_MIN, MOTOR_MIN, MOTOR_MIN, MOTOR_MIN },   // Start motors at min speed      { MOTOR_A_PIN, MOTOR_B_PIN, MOTOR_C_PIN, MOTOR_D_PIN},      false    };        Servo motorA;    Servo motorB;    Servo motorC;    Servo motorD;    // RX Config -----------------------------------------        boolean RXerror = false;    boolean RXtoggle = false;    int n = 0; // Which channel to read    boolean auxtoggle = true;    int auxcount = 0;        int RXtemp = 0;    int RXnodeStart = 0;    double RXnode[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };          #define ROLL_PIN 11 // CIRCUIT    #define THROTTLE_PIN 4 // CIRCUIT    #define PITCH_PIN 12 // CIRCUIT     #define YAW_PIN 6 // CIRCUIT    #define AUX1_PIN 7 // CIRCUIT    #define AUX2_PIN 8 // CIRCUIT    // Active channels in preflight    #define CH1 0    #define CH2 1      #define CH3 2    #define CH4 3    #define CH5 4    #define CH6 5    #define rxROLL 0    #define rxTHROTTLE 1    #define rxPITCH 2     #define rxYAW 3    #define minANGLE -45    #define maxANGLE 45        struct RX {      int raw[6];           // Pulse duration       int rawvalue[6];        // nonzero pulse duration       //int currentchannel;   // cycles chanels       int desired[4];       // desired ROLL, PITCH, YAW and THROTTLE respectively       int minDesired[4];    // min Desired for each, for mapping       int maxDesired[4];    // max Desired for each, for mapping       int PIN[6];           // Rx I/P Pin       //char* name[6];        // name       int zeroread[6];      // if zero readings, accumulated then divided      //int AUXprev[2];       // previous AUX Values       int minimum[6];      // set min pulsein --- needs to be changed to mid value      int maximum[6];      // set max pulsein -- needs to be changed to mid value    } rx =     {      { 2, 2, 2, 2, 2, 2},   // Raw      { 3, 3, 3, 3, 3, 3},      //0,                          // current channel      { 0, 10, 0, 0 },               // desired       { 45, MOTOR_MIN, -45, 10 }, // minmum desired      { -45, MOTOR_MAX, 45, -10 },    // maximum desired      { ROLL_PIN, THROTTLE_PIN, PITCH_PIN, YAW_PIN, AUX1_PIN, AUX2_PIN},    // pin      //{ "Roll    ", "Throttle", "Pitch   ", "Yaw     ", "AUX1    ", "AUX2    " },      { 0, 0, 0, 0, 0, 0},      //{ 0, 0 },      { 1000, 1045, 1000, 1040, 1000, 1000},      { 1900, 1835, 1900, 1800, 1900, 1900}    };    // Time Structure -----------------------------------------        float DT = 0.0;    float DTsec = 0.0;        struct time    {      double current;      double currentMicros;      double previousMicros;      double previous;      double deltaMicros;      double deltaMicrosAvg;      double sensor;      double sensorMicros;      double serial;      double rx;      double motors;      double ctrl;      double hertz;    }time = {       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};#include <Control.h>#include <Debug.h>#include <Interrupt.h>#include <LED.h>#include <Motor.h>#include <Nodes.h>#include <Print.h>#include <RX_Config.h>#include <RX.h>#include <Sensor_Config.h>#include <Sensor.h>#include <Rate_Control.h>#include <Rate_Sensor.h>#include <ALoop.h>#include <ASetup.h>